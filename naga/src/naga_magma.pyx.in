<?py
import re
import datetime

now = datetime.datetime.now()
template_strs = ['CLASSNAME','DIM','C_TYPE','NUMPY_TYPENAME_T','NUMPY_TYPENAME','CAST','C_FFT_TYPE','PY_FFT_TYPE']
template_type_str = 'ARRAY_TYPE'
c_types_info = {

                'float1':  ['Float', '1', 'float', 'np.float32_t', 'np.float32','SIMPLE','cuFloatComplex','ComplexS',[]],
                'float2':  ['Float', '2', 'float', 'np.float32_t', 'np.float32','SIMPLE','cuFloatComplex','ComplexS',[]],

                'double1':['Double', '1', 'double', 'np.float64_t', 'np.float64','SIMPLE','cuDoubleComplex','ComplexD',[]],
                'double2':['Double', '2', 'double', 'np.float64_t', 'np.float64','SIMPLE','cuDoubleComplex','ComplexD',[]],
                }
?>
import numpy as np
cimport numpy as np
#np.import_array()

"""
cdef extern from "carma_obj.h":
    int carma_svd[T](carma_obj[T] *imat, carma_obj[T] *eigenvals,
        carma_obj[T] *mod2act, carma_obj[T] *mes2mod)
    int carma_getri[T](carma_obj[T] *d_iA)
    int carma_potri[T](carma_obj[T] *d_iA)

    int carma_syevd[T](char jobz, long N, T *mat, T *eigenvals)

cdef extern from "carma_host_obj.h":
    int carma_svd_cpu[T](carma_host_obj[T] *imat,
        carma_host_obj[T] *eigenvals, carma_host_obj[T] *mod2act,
        carma_host_obj[T] *mes2mod)
    int carma_getri_cpu[T](long N, T *h_A)
    int carma_potri_cpu[T](long N, T *h_A)
    int carma_syevd_cpu[T](char jobz, int N, T *h_A, T *eigenvals)
"""
<?py

pxd_code_str='''

def svd_host_CLASSNAME(naga_host_obj_CLASSNAME2D mat,
                    naga_host_obj_CLASSNAME1D eigenvals,
                    naga_host_obj_CLASSNAME2D U,
                    naga_host_obj_CLASSNAME2D VT):
    """Call carma_svd_cpu

    naga_host_obj_CLASSNAME2D mat:
    naga_host_obj_CLASSNAME1D eigenvals:
    naga_host_obj_CLASSNAME2D U:
    naga_host_obj_CLASSNAME2D VT:
    """
    carma_svd_cpu[C_TYPE](mat.c_h, eigenvals.c_h, VT.c_h, U.c_h)

def svd_CLASSNAME(naga_obj_CLASSNAME2D mat,
                naga_obj_CLASSNAME1D eigenvals,
                naga_obj_CLASSNAME2D U,
                naga_obj_CLASSNAME2D VT):
    """Call carma_svd
    """

    carma_svd[C_TYPE](mat.c_o, eigenvals.c_o, VT.c_o, U.c_o)


def getri_CLASSNAME(naga_obj_CLASSNAME2D d_mat):
    return carma_getri[C_TYPE](d_mat.c_o)


def getri_host_CLASSNAME(naga_host_obj_CLASSNAME2D h_mat):
    cdef const long *dims=h_mat.c_h.getDims()
    return carma_getri_cpu[C_TYPE](dims[1],h_mat.data_h)


def potri_CLASSNAME(naga_obj_CLASSNAME2D d_mat ):
    return carma_potri[C_TYPE](d_mat.c_o)


def potri_host_CLASSNAME(naga_host_obj_CLASSNAMEDIMD h_mat):
    cdef const long *dims=h_mat.c_h.getDims()
    return carma_potri_cpu[C_TYPE](dims[1],h_mat.c_h.getData())


def syevd_CLASSNAME(naga_obj_CLASSNAME2D d_A,
                np.ndarray[ndim=1,dtype=NUMPY_TYPENAME_T] eigenvals,
                naga_obj_CLASSNAME2D U=None,
                bool computeU=True):

    cdef long N=eigenvals.shape[0]

    if(U is None):
        if(computeU==True):
            carma_syevd[C_TYPE]('V',N,d_A.c_o.getData(), <C_TYPE*>eigenvals.data)
        else:
            carma_syevd[C_TYPE]('N',N,d_A.c_o.getData(), <C_TYPE*>eigenvals.data)
    else:
        U.c_o.copy(d_A.c_o,1,1)
        if(computeU==True):
            carma_syevd[C_TYPE]('V',N,U.c_o.getData(), <C_TYPE*>eigenvals.data)
        else:
            carma_syevd[C_TYPE]('N',N,U.c_o.getData(), <C_TYPE*>eigenvals.data)



def syevd_host_CLASSNAME(naga_host_obj_CLASSNAME2D h_A,
                np.ndarray[ndim=1,dtype=NUMPY_TYPENAME_T] eigenvals,
                naga_host_obj_CLASSNAME2D U=None,
                bool computeU=True):

    cdef long N=eigenvals.shape[0]

    if(U is None):
        if(computeU==True):
            carma_syevd_cpu[C_TYPE]('V',N, h_A.data_h, <C_TYPE*>eigenvals.data)
        else:
            carma_syevd_cpu[C_TYPE]('N',N, h_A.data_h, <C_TYPE*>eigenvals.data)
    else:
        U.fill_from(h_A)
        if(computeU==True):
            carma_syevd_cpu[C_TYPE]('V',N,U.data_h, <C_TYPE*>eigenvals.data)
        else:
            carma_syevd_cpu[C_TYPE]('N',N,U.data_h, <C_TYPE*>eigenvals.data)


'''


for ctype,info in c_types_info.items():

    #code available for all dimensions (constructor, getters, copy...)
    code = pxd_code_str

    if(info[5]=="SIMPLE"):
        code=re.sub("CASTSIMPLE(\n)?","",code)
        code=re.sub("ENDSIMPLE","",code)

        code=re.sub(r"\ *CASTCOMPLEX(.*?\n?)*?ENDCOMPLEX(\n)?","" ,code)

    elif(info[5]=="COMPLEX"):
        code=re.sub(r"\ *CASTSIMPLE(.*?\n?)*?ENDSIMPLE(\n)","" ,code)

        code=re.sub("CASTCOMPLEX(\n)?","",code)
        code=re.sub("ENDCOMPLEX","",code)

    code = code.replace(template_strs[0], info[0])
    code = code.replace(template_strs[1], info[1])
    code = code.replace(template_type_str, ctype)
    code = code.replace(template_strs[2], info[2])
    code = code.replace(template_strs[3], info[3])
    code = code.replace(template_strs[4], info[4])
    code = code.replace(template_strs[6], info[6])
    code = code.replace(template_strs[7], info[7])

    out.write(code)

?>
