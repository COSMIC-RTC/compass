<?py
import re
import datetime
now = datetime.datetime.now()
template_strs = ['CLASSNAME','DIM','C_TYPE','NUMPY_TYPENAME_T','NUMPY_TYPENAME','CAST','C_FFT_TYPE','PY_FFT_TYPE']
template_type_str = 'ARRAY_TYPE'
c_types_info = {
                'int1':['Int', '1', 'int','np.int32_t', 'np.int32','SIMPLE','','',[]],
                'int2':['Int', '2', 'int','np.int32_t', 'np.int32','SIMPLE','','',[]],
                'int3':['Int', '3', 'int','np.int32_t', 'np.int32','SIMPLE','','',[]],
                'int4':['Int', '4', 'int','np.int32_t', 'np.int32','SIMPLE','','',[]],
                'unsigned int1':['UInt', '1','unsigned int','np.uint32_t', 'np.uint32','SIMPLE','','', []],
                'unsigned int2':['UInt', '2','unsigned int','np.uint32_t', 'np.uint32','SIMPLE','','', []],
                'unsigned int3':['UInt', '3','unsigned int','np.uint32_t', 'np.uint32','SIMPLE','','', []],
                'unsigned int4':['UInt', '4','unsigned int','np.uint32_t', 'np.uint32','SIMPLE','','', []],

                'float1':  ['Float', '1', 'float', 'np.float32_t', 'np.float32','SIMPLE','cuFloatComplex','ComplexS',[]],
                'float2':  ['Float', '2', 'float', 'np.float32_t', 'np.float32','SIMPLE','cuFloatComplex','ComplexS',[]],
                'float3':   ['Float'   ,'3', 'float', 'np.float32_t', 'np.float32','SIMPLE','cuFloatComplex','ComplexS',[]],
                'float4':   ['Float'   ,'4', 'float', 'np.float32_t', 'np.float32','SIMPLE','cuFloatComplex','ComplexS',[]],
                'complexS1':['ComplexS', '1', 'cuFloatComplex', 'np.complex64_t', 'np.complex64','COMPLEX','float','Float',[]],
                'complexS2':['ComplexS', '2', 'cuFloatComplex', 'np.complex64_t', 'np.complex64','COMPLEX','float','Float',[]],
                'complexS3':['ComplexS', '3', 'cuFloatComplex', 'np.complex64_t', 'np.complex64','COMPLEX','float','Float',[]],
                'complexS4':['ComplexS', '4', 'cuFloatComplex', 'np.complex64_t', 'np.complex64','COMPLEX','float','Float',[]],

                'double1':['Double', '1', 'double', 'np.float64_t', 'np.float64','SIMPLE','cuDoubleComplex','ComplexD',[]],
                'double2':['Double', '2', 'double', 'np.float64_t', 'np.float64','SIMPLE','cuDoubleComplex','ComplexD',[]],
                'double3':['Double', '3', 'double', 'np.float64_t', 'np.float64','SIMPLE','cuDoubleComplex','ComplexD',[]],
                'double4':['Double', '4', 'double', 'np.float64_t', 'np.float64','SIMPLE','cuDoubleComplex','ComplexD',[]],
                'complexD1':['ComplexD', '1', 'cuDoubleComplex', 'np.complex128_t', 'np.complex128','COMPLEX','double','Double',[]],
                'complexD2':['ComplexD', '2', 'cuDoubleComplex', 'np.complex128_t', 'np.complex128','COMPLEX','double','Double',[]],
                'complexD3':['ComplexD', '3', 'cuDoubleComplex', 'np.complex128_t', 'np.complex128','COMPLEX','double','Double',[]],
                'complexD4':['ComplexD', '4', 'cuDoubleComplex', 'np.complex128_t', 'np.complex128','COMPLEX','double','Double',[]],
                }
?>



"""    
cdef extern from "carma_host_obj.h":
    ctypedef enum MemAlloc:
        MA_MALLOC
        MA_PAGELOCK
        MA_ZEROCPY
        MA_PORTABLE
        MA_WRICOMB
        MA_GENEPIN

#################################################
# C-Class carma_host_obj
#################################################
    cdef cppclass carma_host_obj[T]:

        T *h_data #< Input data
        T *data_UA #< unpadded input dara for generic pinned mem
        long *dims_data #< dimensions of the array
        int nb_elem #< number of elments in the array
        MemAlloc mallocType #< type of host alloc
        carma_streams *streams


        carma_host_obj(const long *dims_data)
        carma_host_obj(const long *dims_data, MemAlloc mallocType)
        carma_host_obj(const carma_host_obj[T] *obj)
        carma_host_obj(const carma_host_obj[T] *obj, MemAlloc mallocType)
        carma_host_obj(const long *dims_data, T *data)
        carma_host_obj(const long *dims_data, T *data, MemAlloc mallocType)
        carma_host_obj(const long *dims_data, int nb_streams)
        carma_host_obj(const long *dims_data, MemAlloc mallocType, int nb_streams)
        carma_host_obj(const carma_host_obj[T] *obj, int nb_streams)
        carma_host_obj(const carma_host_obj[T] *obj, MemAlloc mallocType,
            int nb_streams)
        carma_host_obj(const long *dims_data, T *data, int nb_streams)
        carma_host_obj(const long *dims_data, T *data, MemAlloc mallocType,
            int nb_streams)
        #~carma_host_obj()

        void get_devpntr(void **pntr_dev)

        int get_nbStreams()
        int add_stream()
        int add_stream(int nb)
        int del_stream()
        int del_stream(int nb)
        cudaStream_t get_cudaStream_t(int stream)
        int wait_stream(int stream)
        int wait_all_streams()

        int cpy_obj(carma_obj[T]* caObj, cudaMemcpyKind flag)
        int cpy_obj(carma_obj[T]* caObj, cudaMemcpyKind flag, unsigned int stream)

        T* getData()
        T* getData(int index)
        const long *getDims()
        int getNbElem()

        int fill_from(const T *data)
        int fill_into(T *data)

        #string getMetAlloc()

    #int carma_svd_cpu[T](long N, long M, T *imat, T *eigenvals, T *mod2act,
    #    T *mes2mod)
    #int carma_getri_cpu[T](long N, T *h_A)
    #int carma_potri_cpu[T](long N, T *h_A)
    #int carma_syevd_cpu[T](char jobz, long N, T *h_A, T *eigenvals)
    #int carma_axpy_cpu[T](long N, T alpha, T *h_X, long incX, T *h_Y, long incY)
    #int carma_gemm_cpu[T](char transa, char transb, long m, long n, long k, T alpha,
    #    T *A, long lda, T *B, long ldb, T beta, T *C, long ldc)

    #int carma_svd_cpu[T](carma_host_obj[T] *imat,
    #    carma_host_obj[T] *eigenvals, carma_host_obj[T] *mod2act,
    #    carma_host_obj[T] *mes2mod)
    #int carma_getri_cpu[T](carma_host_obj[T] *h_A)
    #int carma_potri_cpu[T](carma_host_obj[T] *h_A)
    #int carma_syevd_cpu[T](char jobz, carma_host_obj[T] *h_A,
    #    carma_host_obj[T] *eigenvals)

"""    


cdef dict_MemAlloc={"malloc":(MA_MALLOC),
                    "pagelock":(MA_PAGELOCK),
                    "zerocpy":(MA_ZEROCPY),
                    "portable":(MA_PORTABLE),
                    "wricomb":(MA_WRICOMB),
                    "genepin":(MA_GENEPIN),
                    "none":(-1)}
#none : add into C code

<?py
pxd_code_str='''
cdef class naga_host_obj_CLASSNAMEDIMD:

    def __cinit__(self, 
            np.ndarray[ndim=1, dtype=np.int64_t] dims=None,
            naga_host_obj_CLASSNAMEDIMD obj=None,
            np.ndarray[ndim=DIM,dtype=NUMPY_TYPENAME_T] data=None,
            str mallocType= "none",
            int nbStreams=-1
            ):

        """naga_host_obj_CLASSNAMEDIMD constructor.

    constructors available:
        naga_host_obj(np.ndarray dims)
        naga_host_obj(np.ndarray dims, int nbStreams)
        naga_host_obj(np.ndarray dims, str mallocType)
        naga_host_obj(np.ndarray dims, str mallocType, int nbStreams)
        naga_host_obj(np.ndarray data)
        naga_host_obj(np.ndarray data, int nbStream)
        naga_host_obj(np.ndarray data, str mallocType)
        naga_host_obj(np.ndarray data, str mallocType, int nbStreams)
        naga_host_obj(naga_host_obj_CLASSNAMEDIMD obj)
        naga_host_obj(naga_host_obj_CLASSNAMEDIMD obj, int nbStream)
        naga_host_obj(naga_host_obj_CLASSNAMEDIMD obj, str mallocType)
        naga_host_obj(naga_host_obj_CLASSNAMEDIMD obj, str mallocType, int nbStreams)

        input data must be a np.ndarray with ndim=DIM
        dims must be a np array of shape (DIM)
        """
        
        cdef long sh[DIM+1]
        cdef int i


        cdef MemAlloc MT = dict_MemAlloc[mallocType]

        if(obj is None):
            if(data is None):
                try:
                    for i in range(DIM):
                        sh[i+1]=dims[i]
                    sh[0]=DIM
                except ValueError:
                    print "At least: argument 'dims' is required"

                if(MT ==-1):
                    if(nbStreams is None):
                        self.c_h=new carma_host_obj[C_TYPE](sh)
                    else:
                        self.c_h=new carma_host_obj[C_TYPE](sh, nbStreams)
                else:
                    if(nbStreams==-1):
                        self.c_h=new carma_host_obj[C_TYPE](sh, MT)
                    else:
                        self.c_h=new carma_host_obj[C_TYPE](sh, MT, nbStreams)
 
            else:
                if(not data.flags.fortran):
                    data=np.asfortranarray(data)
                sh[0]=DIM
                for i in range(DIM):
                     sh[i+1]=data.shape[i]
                
                if(MT ==-1):
                    if(nbStreams is None):
                        self.c_h=new carma_host_obj[C_TYPE](sh,
                                                            <C_TYPE*>data.data)
                    else:
                        self.c_h=new carma_host_obj[C_TYPE](sh,
                                                            <C_TYPE*>data.data,
                                                            nbStreams)
                else:
                    if(nbStreams==-1):
                        self. c_h=new carma_host_obj[C_TYPE](sh,
                                                            <C_TYPE*>data.data,
                                                            MT)
                    else:
                        self. c_h=new carma_host_obj[C_TYPE](sh,
                                                            <C_TYPE*>data.data,
                                                            MT,nbStreams)

        elif(dims is None and data is None):
            if(MT==-1):
                if(nbStreams==-1):
                    self.c_h=new carma_host_obj[C_TYPE](obj.c_h)
                else:
                    self.c_h=new carma_host_obj[C_TYPE](obj.c_h,nbStreams)
            else:
                if(nbStreams==-1):
                    self.c_h=new carma_host_obj[C_TYPE](obj.c_h,MT)
                else:
                    self.c_h=new carma_host_obj[C_TYPE](obj.c_h,MT,nbStreams)


        else:
           raise ValueError("----")


        self.data_h=self.c_h.getData()


    def __dealloc__(self):
        del self.c_h

    def get_Dims(self):
        cdef dims= np.ndarray((DIM),dtype=np.int64)
        cdef const long *cdims
        cdef int i

        cdims=self.c_h.getDims()
        for i in range(DIM):
            dims[i]=cdims[i+1]
        return dims

    def get_host_obj_ptr(self):
        """Return the pointer to the naga_host_obj."""
        cdef uintptr_t host_obj_ptr=<uintptr_t>self.c_h.getData()
        return host_obj_ptr


    def cpy_obj_from(self, naga_obj_CLASSNAMEDIMD src):
        """Copy into naga_host_obj (cpu storage) the data from a naga_obj (gpu storage).
        
        src -- naga_obj_CLASSNAMEDIMD: object to copy from
        """
        cdef uintptr_t src_ptr = <uintptr_t>src.getCarma_ptr()
        self.c_h.cpy_obj(<carma_obj[C_TYPE]*>src_ptr,cudaMemcpyDeviceToHost)

    def cpy_obj_into(self,naga_obj_CLASSNAMEDIMD dest):
        """Copy into naga_host_obj (cpu storage) the data from a naga_obj (gpu storage).
        
        dest -- naga_obj_CLASSNAMEDIMD: object to copy into
        """
        cdef uintptr_t dest_ptr = <uintptr_t>dest.getCarma_ptr()
        self.c_h.cpy_obj(<carma_obj[C_TYPE]*>dest_ptr,cudaMemcpyHostToDevice)


    def getData(self):
        cdef int i
        cdef sh=np.zeros((DIM),dtype=np.int64)
        cdef const long *cdims
        cdef np.ndarray[ndim=DIM,dtype=NUMPY_TYPENAME_T] data

        cdims=self.c_h.getDims()

        for i in range(DIM):
            sh[i]=cdims[i+1]

        data=np.zeros(sh,dtype=NUMPY_TYPENAME,order="F")

        self.c_h.fill_into(<C_TYPE*>data.data)
        return data


    def setData(self,np.ndarray[ndim=DIM,dtype=NUMPY_TYPENAME_T] data):
        if(not data.flags.fortran):
            data=np.asfortranarray(data)
        self.c_h.fill_from(<C_TYPE*>data.data)

    def getNbElem(self):
        return self.c_h.getNbElem()
'''

for ctype,info in c_types_info.items():

#code available for all dimensions (constructor, getters, copy...) 
    code = pxd_code_str


    if(info[5]=="SIMPLE"):
        code=re.sub("CASTSIMPLE(\n)?","",code)
        code=re.sub("ENDSIMPLE","",code)

        code=re.sub(r"\ *CASTCOMPLEX(.*?\n?)*?ENDCOMPLEX(\n)?","" ,code)

    elif(info[5]=="COMPLEX"):
        code=re.sub(r"\ *CASTSIMPLE(.*?\n?)*?ENDSIMPLE(\n)","" ,code)

        code=re.sub("CASTCOMPLEX(\n)?","",code)
        code=re.sub("ENDCOMPLEX","",code)

    code = code.replace(template_strs[0], info[0])
    code = code.replace(template_strs[1], info[1])
    code = code.replace(template_type_str, ctype)
    code = code.replace(template_strs[2], info[2])
    code = code.replace(template_strs[3], info[3])
    code = code.replace(template_strs[4], info[4])
    code = code.replace(template_strs[6], info[6])
    code = code.replace(template_strs[7], info[7])

    out.write(code)
    
?>

