
// 
template void kernel_add<float>(float* d_cu1, const float* d_cu2, int length);
template void kernel_sub<float>(float* d_cu1, const float* d_cu2, int length);
template void kernel_mult<float>(float* d_cu1, const float* d_cu2, int length);
template void kernel_div<float>(float* d_cu1, const float* d_cu2, int length);
template void kernel_add_const<float>(float* d_cu1, float valeur, int length);
template void kernel_sub_const<float>(float* d_cu1, float valeur, int length);
template void kernel_mult_const<float>(float* d_cu1, float valeur, int length);
template void kernel_div_const<float>(float* d_cu1, float valeur, int length);
template void kernel_sqrt<float>(float* d_cu1, int length);
template void kernel_inv<float>(float* d_cu1, int length);
template void kernel_memcpy<float,float>(float* d_cu_dst, const float* d_cu_src, int length);
template void kernel_memset<float>(float* d_cu_dst, float valeur, int length);
template void kernel_A1_2vec<float>(float* Atur_d_cu, float* Btur_d_cu, int* colind, int* rowind, float* values, int nb_az, int nnz);
template void kernel_memcpy_diag<float>(float* dev_dst, const float *dev_src, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template void kernel_memset_diag<float>(float* dev_dst, float val, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template void kernel_sparse2full<float>(float* dev_dst, int *dev_src_rowind, int *dev_src_colind, float* dev_src_values, int nnz, int src_dim1, int src_dim2);
template void kernel_add_diag_const<float>(float* d_cu1, float val, int dim1);
template void kernel_get_diag<float>(float* dst_diag, float* src_M, int dim1);
template void kernel_diag_mult<float>(float* mat_dst, float* mat_src, float* vec_src, int dim1, int nb_elements);
template void kernel_diag_mult2<float>(float* mat_dst, float* mat_src, float* vec_src, int dim1, int nb_elements);
template void kernel_diag_mult3<float>(float* mat_dst1, float* mat_dst2, float* mat_src, float* vec_src, int dim1, int nb_elements);
template void kernel_set_submatrix<float>(float* mat_dst, float* mat_src, int src_dim1, int r1, int c1, int nb_rows, int nb_col);
template void kernel_set_Linf<float>(float* mat_Linf, float* mat_Hinf, float* atur, float* btur, int nb_n, int nb_p, int ordreAR);
//template void kernel_set_Linf_AR2<float>(float* mat_Linf, float* mat_Hinf, float* atur, float* btur, int nb_n, int nb_p);
template void kernel_add_A1<float>(float* mat, float* atur, float* btur, int nb_az, int ordreAR);

template void kernel_add<double>(double* d_cu1, const double* d_cu2, int length);
template void kernel_sub<double>(double* d_cu1, const double* d_cu2, int length);
template void kernel_mult<double>(double* d_cu1, const double* d_cu2, int length);
template void kernel_div<double>(double* d_cu1, const double* d_cu2, int length);
template void kernel_add_const<double>(double* d_cu1, double valeur, int length);
template void kernel_sub_const<double>(double* d_cu1, double valeur, int length);
template void kernel_mult_const<double>(double* d_cu1, double valeur, int length);
template void kernel_div_const<double>(double* d_cu1, double valeur, int length);
template void kernel_sqrt<double>(double* d_cu1, int length);
template void kernel_inv<double>(double* d_cu1, int length);
template void kernel_memcpy<double,double>(double* d_cu_dst, const double* d_cu_src, int length);
template void kernel_memset<double>(double* d_cu_dst, double valeur, int length);
template void kernel_A1_2vec<double>(double* Atur_d_cu, double* Btur_d_cu, int* colind, int* rowind, double* values, int nb_az, int nnz);
template void kernel_memcpy_diag<double>(double* dev_dst, const double *dev_src, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template void kernel_memset_diag<double>(double* dev_dst, double val, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template void kernel_sparse2full<double>(double* dev_dst, int *dev_src_rowind, int *dev_src_colind, double* dev_src_values, int nnz, int src_dim1, int src_dim2);
template void kernel_add_diag_const<double>(double* d_cu1, double val, int dim1);
template void kernel_get_diag<double>(double* dst_diag, double* src_M, int dim1);
template void kernel_diag_mult<double>(double* mat_dst, double* mat_src, double* vec_src, int dim1, int nb_elements);
template void kernel_diag_mult2<double>(double* mat_dst, double* mat_src, double* vec_src, int dim1, int nb_elements);
template void kernel_diag_mult3<double>(double* mat_dst1, double* mat_dst2, double* mat_src, double* vec_src, int dim1, int nb_elements);
template void kernel_set_submatrix<double>(double* mat_dst, double* mat_src, int src_dim1, int r1, int c1, int nb_rows, int nb_col);
template void kernel_set_Linf<double>(double* mat_Linf, double* mat_Hinf, double* atur, double* btur, int nb_n, int nb_p, int ordreAR);
//template void kernel_set_Linf_AR2<double>(double* mat_Linf, double* mat_Hinf, double* atur, double* btur, int nb_n, int nb_p);
template void kernel_add_A1<double>(double* mat, double* atur, double* btur, int nb_az, int ordreAR);

template void kernel_add<int>(int* d_cu1, const int* d_cu2, int length);
template void kernel_sub<int>(int* d_cu1, const int* d_cu2, int length);
template void kernel_mult<int>(int* d_cu1, const int* d_cu2, int length);
template void kernel_add_const<int>(int* d_cu1, int valeur, int length);
template void kernel_sub_const<int>(int* d_cu1, int valeur, int length);
template void kernel_mult_const<int>(int* d_cu1, int valeur, int length);
template void kernel_memcpy<int,int>(int* d_cu_dst, const int* d_cu_src, int length);
template void kernel_memset<int>(int* d_cu_dst, int valeur, int length);
template void kernel_A1_2vec<int>(int* Atur_d_cu, int* Btur_d_cu, int* colind, int* rowind, int* values, int nb_az, int nnz);
template void kernel_memcpy_diag<int>(int* dev_dst, const int *dev_src, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template void kernel_memset_diag<int>(int* dev_dst, int val, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template void kernel_sparse2full<int>(int* dev_dst, int *dev_src_rowind, int *dev_src_colind, int* dev_src_values, int nnz, int src_dim1, int src_dim2);
template void kernel_add_diag_const<int>(int* d_cu1, int val, int dim1);
template void kernel_get_diag<int>(int* dst_diag, int* src_M, int dim1);
template void kernel_diag_mult<int>(int* mat_dst, int* mat_src, int* vec_src, int dim1, int nb_elements);
template void kernel_diag_mult2<int>(int* mat_dst, int* mat_src, int* vec_src, int dim1, int nb_elements);
template void kernel_diag_mult3<int>(int* mat_dst1, int* mat_dst2, int* mat_src, int* vec_src, int dim1, int nb_elements);
template void kernel_set_submatrix<int>(int* mat_dst, int* mat_src, int src_dim1, int r1, int c1, int nb_rows, int nb_col);
template void kernel_set_Linf<int>(int* mat_Linf, int* mat_Hinf, int* atur, int* btur, int nb_n, int nb_p, int ordreAR);
//template void kernel_set_Linf_AR2<int>(int* mat_Linf, int* mat_Hinf, int* atur, int* btur, int nb_n, int nb_p);
template void kernel_add_A1<int>(int* mat, int* atur, int* btur, int nb_az, int ordreAR);

template void kernel_memcpy<double,float>(double* d_cu_dst, const float* d_cu_src, int length);
template void kernel_memcpy<float,double>(float* d_cu_dst, const double* d_cu_src, int length);






template __global__ void Add_lam<float>(float* A, const float *B, int numElements);
template __global__ void Sub_lam<float>(float* A, const float *B, int numElements);
template __global__ void Mult_lam<float>(float* A, const float *B, int numElements);
template __global__ void Div_lam<float>(float* A, const float *B, int numElements);
template __global__ void AddConst_lam<float>(float* A, float val, int numElements);
template __global__ void SubConst_lam<float>(float* A, float val, int numElements);
template __global__ void MultConst_lam<float>(float* A, float val, int numElements);
template __global__ void DivConst_lam<float>(float* A, float val, int numElements);
template __global__ void Sqrt_lam<float>(float* A, int numElements);
template __global__ void Inv_lam<float>(float* A, int numElements);
template __global__ void Memcpy_lam<float,float>(float* d_cu_dst, const float* d_cu_src, int length);
template __global__ void Memset_lam<float>(float* dev_dst, float valeur, int numElements);
template __global__ void A1_2vec_lam<float>(float* Atur_d_cu, float* Btur_d_cu, int* colind, int* rowind, float* values, int nb_az, int nnz);
template __global__ void MemcpyDiag_lam<float>(float* dev_dst, const float *dev_src, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template __global__ void MemsetDiag_lam<float>(float* dev_dst, float val, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template __global__ void Sparse2full_lam<float>(float* dev_dst, int *dev_src_rowind, int *dev_src_colind, float* dev_src_values, int nnz, int src_dim1);
template __global__ void AddDiagConst_lam<float>(float* dev_dst, float val, int dim1);
template __global__ void GetDiag_lam<float>(float* dst_diag, float* src_M,  int dim1);
template __global__ void DiagMult_lam<float>(float* mat_dst, float* mat_src, float* vec_src, int mat_src_dim1, int nb_elements);
template __global__ void DiagMult2_lam<float>(float* mat_dst, float* mat_src, float* vec_src, int mat_src_dim1, int nb_elements);
template __global__ void DiagMult3_lam<float>(float* mat_dst1, float* mat_dst2, float* mat_src, float* vec_src, int mat_src_dim1, int nb_elements);
template __global__ void SetSubmatrix_lam<float>(float* mat_dst, float* mat_src, int src_dim1, int r1, int c1, int nb_rows, int nb_elements);
template __global__ void SetLinf_lam<float>(float* mat_Linf, float* mat_Hinf, float* atur, float* btur, int nb_n, int nb_elements, int ordreAR);
//template __global__ void SetLinfAR2<float>(float* mat_Linf, float* mat_Hinf, float* atur, float* btur, int nb_n, int nb_elements);
template __global__ void AddA1_lam<float>(float* mat, float* atur, float* btur, int nb_az, int nb_elements, int ordreAR);

template __global__ void Add_lam<double>(double* A, const double *B, int numElements);
template __global__ void Sub_lam<double>(double* A, const double *B, int numElements);
template __global__ void Mult_lam<double>(double* A, const double *B, int numElements);
template __global__ void Div_lam<double>(double* A, const double *B, int numElements);
template __global__ void AddConst_lam<double>(double* A, double val, int numElements);
template __global__ void SubConst_lam<double>(double* A, double val, int numElements);
template __global__ void MultConst_lam<double>(double* A, double val, int numElements);
template __global__ void DivConst_lam<double>(double* A, double val, int numElements);
template __global__ void Sqrt_lam<double>(double* A, int numElements);
template __global__ void Inv_lam<double>(double* A, int numElements);
template __global__ void Memcpy_lam<double,double>(double* d_cu_dst, const double* d_cu_src, int length);
template __global__ void Memset_lam<double>(double* dev_dst, double valeur, int numElements);
template __global__ void A1_2vec_lam<double>(double* Atur_d_cu, double* Btur_d_cu, int* colind, int* rowind, double* values, int nb_az, int nnz);
template __global__ void MemcpyDiag_lam<double>(double* dev_dst, const double *dev_src, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template __global__ void MemsetDiag_lam<double>(double* dev_dst, double val, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template __global__ void Sparse2full_lam<double>(double* dev_dst, int *dev_src_rowind, int *dev_src_colind, double* dev_src_values, int nnz, int src_dim1);
template __global__ void AddDiagConst_lam<double>(double* dev_dst, double val, int dim1);
template __global__ void GetDiag_lam<double>(double* dst_diag, double* src_M,  int dim1);
template __global__ void DiagMult_lam<double>(double* mat_dst, double* mat_src, double* vec_src, int mat_src_dim1, int nb_elements);
template __global__ void DiagMult2_lam<double>(double* mat_dst, double* mat_src, double* vec_src, int mat_src_dim1, int nb_elements);
template __global__ void DiagMult3_lam<double>(double* mat_dst1, double* mat_dst2, double* mat_src, double* vec_src, int mat_src_dim1, int nb_elements);
template __global__ void SetSubmatrix_lam<double>(double* mat_dst, double* mat_src, int src_dim1, int r1, int c1, int nb_rows, int nb_elements);
template __global__ void SetLinf_lam<double>(double* mat_Linf, double* mat_Hinf, double* atur, double* btur, int nb_n, int nb_elements, int ordreAR);
//template __global__ void SetLinfAR2<double>(double* mat_Linf, double* mat_Hinf, double* atur, double* btur, int nb_n, int nb_elements);
template __global__ void AddA1_lam<double>(double* mat, double* atur, double* btur, int nb_az, int nb_elements, int ordreAR);

template __global__ void Add_lam<int>(int* A, const int *B, int numElements);
template __global__ void Sub_lam<int>(int* A, const int *B, int numElements);
template __global__ void Mult_lam<int>(int* A, const int *B, int numElements);
template __global__ void AddConst_lam<int>(int* A, int val, int numElements);
template __global__ void SubConst_lam<int>(int* A, int val, int numElements);
template __global__ void MultConst_lam<int>(int* A, int val, int numElements);
template __global__ void Memcpy_lam<int,int>(int* d_cu_dst, const int* d_cu_src, int length);
template __global__ void Memset_lam<int>(int* dev_dst, int valeur, int numElements);
template __global__ void A1_2vec_lam<int>(int* Atur_d_cu, int* Btur_d_cu, int* colind, int* rowind, int* values, int nb_az, int nnz);
template __global__ void MemcpyDiag_lam<int>(int* dev_dst, const int *dev_src, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template __global__ void MemsetDiag_lam<int>(int* dev_dst, int val, int rowDebut, int colDebut, int numElements, int dev_dest_dim1);
template __global__ void Sparse2full_lam<int>(int* dev_dst, int *dev_src_rowind, int *dev_src_colind, int* dev_src_values, int nnz, int src_dim1);
template __global__ void AddDiagConst_lam<int>(int* dev_dst, int val, int dim1);
template __global__ void GetDiag_lam<int>(int* dst_diag, int* src_M,  int dim1);
template __global__ void DiagMult_lam<int>(int* mat_dst, int* mat_src, int* vec_src, int mat_src_dim1, int nb_elements);
template __global__ void DiagMult2_lam<int>(int* mat_dst, int* mat_src, int* vec_src, int mat_src_dim1, int nb_elements);
template __global__ void DiagMult3_lam<int>(int* mat_dst1, int* mat_dst2, int* mat_src, int* vec_src, int mat_src_dim1, int nb_elements);
template __global__ void SetSubmatrix_lam<int>(int* mat_dst, int* mat_src, int src_dim1, int r1, int c1, int nb_rows, int nb_elements);
template __global__ void SetLinf_lam<int>(int* mat_Linf, int* mat_Hinf, int* atur, int* btur, int nb_n, int nb_elements, int ordreAR);
//template __global__ void SetLinfAR2<int>(int* mat_Linf, int* mat_Hinf, int* atur, int* btur, int nb_n, int nb_elements);
template __global__ void AddA1_lam<int>(int* mat, int* atur, int* btur, int nb_az, int nb_elements, int ordreAR);

template __global__ void Memcpy_lam<float,double>(float* d_cu_dst, const double* d_cu_src, int length);
template __global__ void Memcpy_lam<double,float>(double* d_cu_dst, const float* d_cu_src, int length);

