The shesha folder contain provide a python interface to the sutra of compass project.

In order to compile, environment variable required:
    path to compass: COMPASS_ROOT
    path to cuda   : CUDA_ROOT
    path to carmaWrap   : NAGA_ROOT
    path to shesha : SHESHA_ROOT

Add NAGA_ROOT and SHESHA_ROOT to the PYTHON_PATH

The compilation is done with the command:
    python setup.py build_ext --inplace

    REQUIREMENT:
        * cython 0.22
        * python 2.7
        * carma librairie
        * sutra librairie
        * carmaWrap module
        *( optional) mpi4py 1.3.1

To clean the folder, use the command:
    python clean.py


Running test:
    python (-i) "test_file" "test_par"
    mpirun -np "nbproc" python "test_file" "test_par"

    ex: from shesha folder
        "python test/closed_loop.py data/par/1wfs8x8_1layer_rtc_dm.py"
        "mpirun -np 2 python test/closed_loop_mpi.py data/par/1wfs8x8_1layer_rtc_dm.py"


MPI available only with:
    -wfs_type="sh"
    -no lgs
    -centroider_type="cog"


Content:
    * src                       folder containing wrapper sources
        - shesha.pyx
        - param.pyx     , param.pxd
        - atmos.pyx     , atmos.pxd
        - dms.pyx       , dms.pxd
        - target.pyx    , target.pxd
        - wfs.pyx
        - sensors.pyx   ,sensors.pxd
        - rtc.pyx       ,rtc.pxd
        - sutra.pxd
        - make_pupil.py
        - iterkolmo.py

    * widgets                   folder for the gui of shesha

    * data                      folder containig datas
        - Na profile
        - apertures
        - mat                   folder containig eigenvalues, imat matrices
                                    U matrices, pzt ok and nok vectors
        - par                   folder containig parameters files
        - turbu                 folder containig turbulence matrices and stencils

    * setup.py                  compilation setups

    * clean.py                  cleaning script

    * test                      testing routines
            closed_loop.py      closed loop test
            closed_loop_mpi.py  closed loop test with mpi

    * lib                       folder containig shesha submodules

    * doc                       folder containig documentation (generated with Sphinx)
